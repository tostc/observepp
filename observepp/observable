/*
 * MIT License
 *
 * Copyright (c) 2020 Christian Tost
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef OBSERVEABLE
#define OBSERVEABLE

#include <functional>
#include <map>
#include <mutex>

namespace observepp
{
    /**
     * @brief Base class for observeable objects.
     */
    template<class T>
    class Observable
    {
        public:
            using value_type = T;
            using reference = value_type&;
            using const_reference = const value_type&;
            using pointer = T*;
            using const_pointer = const pointer;
            using value_changed_fn = std::function<void(const_reference newValue)>;

            Observable() : m_AutoInc(0) {}
            Observable(const Observable& obj)
            {
                m_AutoInc = obj.m_AutoInc;
                m_Observers = obj.m_Observers;
            }

            /**
             * @brief Adds a new observer.
             * @return Returns the id of the observer.
             */
            virtual size_t AddObserver(value_changed_fn fn)
            {
                std::lock_guard<std::mutex> lock(m_Lock);

                m_AutoInc++;
                m_Observers[m_AutoInc] = fn;

                return m_AutoInc;
            }

            /**
             * @brief Removes am observer by its id.
             */
            void RemoveObserver(size_t ID)
            {
                std::lock_guard<std::mutex> lock(m_Lock);
                m_Observers.erase(ID);
            }

            /**
             * @brief Removes all observers.
             */
            void ClearObservers()
            {
                std::lock_guard<std::mutex> lock(m_Lock);
                m_AutoInc = 0;
                m_Observers.clear();
            }

            ~Observable() = default;

        protected:
            void OnValueChanged(const_reference newValue)
            {
                std::lock_guard<std::mutex> lock(m_Lock);
                for (auto fn : m_Observers)
                {
                    fn.second(newValue);
                }
            }

        private:
            std::mutex m_Lock;
            size_t m_AutoInc;
            std::map<int, value_changed_fn> m_Observers;
    };
} // namespace observepp


#endif //OBSERVEABLE